# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\OpenPGP\ui\receive_message_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import base64
import os
import zlib
from datetime import datetime

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox

from OpenPGP.asymmetric_encryption.asymmetricencryption import AsymmetricEncryption
from OpenPGP.asymmetric_encryption.keys.privatekeyring import private_keyring
from OpenPGP.asymmetric_encryption.keys.publickeyring import public_keyring
from OpenPGP.symmetric_encryption.symmetricencryption import SymmetricEncryption
from OpenPGP.users.users_db import usersDB


class Ui_receive_message_window(object):

    def __init__(self):
        self.filename = ""

    def set_enabled_components(self, state: bool) -> None:
        self.set_enabled_passphrase_components(state)
        self.set_enabled_message_components(state)

    def set_enabled_passphrase_components(self, state: bool) -> None:
        self.label_passphrase.setEnabled(state)
        self.textbox_passphrase.setEnabled(state)
        self.button_open_message.setEnabled(state)

    def set_enabled_message_components(self, state: bool) -> None:
        self.label_message.setEnabled(state)
        self.label_name.setEnabled(state)
        self.textbox_name.setEnabled(state)
        self.label_email.setEnabled(state)
        self.textbox_email.setEnabled(state)
        self.label_date.setEnabled(state)
        self.textbox_date.setEnabled(state)
        self.label_text.setEnabled(state)
        self.text_message.setEnabled(state)
        self.button_save_message.setEnabled(state)
        if not state:
            self.text_message.setText("")
            self.textbox_name.setText("")
            self.textbox_date.setText("")
            self.textbox_email.setText("")

    def open_error(self, error_message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(error_message)
        msg.setWindowTitle("Error!")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()

    def open_information(self, notification_message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText(notification_message)
        msg.setWindowTitle("Notification!")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()

    def select_message(self):
        self.set_enabled_components(False)
        options = QFileDialog.Options()
        self.filename, _ = QFileDialog.getOpenFileName(None, "Select a file",
                                                       os.path.join(os.path.expanduser("~"), "Desktop"),
                                                       "All files (*)", options=options)
        try:
            with open(self.filename, "rb") as file:
                curr_line = file.readline().rstrip(b'\n')                   # read radix64
                if curr_line.split(b':')[1] == b'y':                        # r:y
                    encoded = file.readline().rstrip(b'\n')
                    decoded = base64.b64decode(encoded).split(b'##########')
                    if decoded[0].split(b':')[1] == b'y':                   # r:y|e:y
                        self.set_enabled_passphrase_components(True)
                    else:                                                   # r:y|e:n
                        self.button_open_message.setEnabled(True)
                else:
                    curr_line = file.readline().rstrip(b'\n')               # read encryption
                    if curr_line.split(b':')[1] == b'y':                    # r:n|e:y
                        self.set_enabled_passphrase_components(True)
                    else:                                                   # r:n|e:n
                        self.button_open_message.setEnabled(True)
        except Exception as e:
            self.open_error("Faulty file. Ask the sender to send it again.")
            self.set_enabled_components(False)

    def open_message(self):
        asymmetric_encryption = AsymmetricEncryption()
        logged_in_userID = usersDB.logged_in_user.name + ":" + usersDB.logged_in_user.email
        if self.textbox_passphrase.isEnabled() and usersDB.logged_in_user.password != self.textbox_passphrase.text():
            self.open_error("Wrong passphrase!")
            return
        self.set_enabled_message_components(True)
        try:
            with open(self.filename, "rb") as file:

                ''' all included, not good software engineering but i don't know a better way to do this :('''
                curr_line = file.readline().rstrip(b'\n')                           # read radix64
                if curr_line.split(b':')[1] == b'y':                                # r:y
                    encoded = file.readline().rstrip(b'\n')
                    decoded = base64.b64decode(encoded).split(b'##########')
                    if decoded[0].split(b':')[1] == b'y':                           # r:y|e:y
                        algorithm = decoded[1].split(b':')[1].decode('utf-8')
                        receiver_userID = decoded[2].decode('utf-8')
                        if receiver_userID != logged_in_userID:
                            self.open_error("This message isn't for you.")
                            self.set_enabled_components(False)
                            return
                        receiver_keyID = int(decoded[3].decode('utf-8'))
                        encrypted_session_key = decoded[4]
                        encrypted_message = decoded[5]
                        symmetric_encryption = SymmetricEncryption(algorithm, public_keyring, private_keyring)
                        message = symmetric_encryption.decrypt(encrypted_message, encrypted_session_key,
                                                               receiver_userID, receiver_keyID, self.textbox_passphrase.text())
                        message_list = message.split(b"##########")
                        if message_list[0].split(b":")[1] == b'y':                  # r:y|e:y|z:y
                            compressed = message_list[1]
                            decompressed = zlib.decompress(compressed).split(b'##########')
                            if decompressed[0].split(b':')[1] == b'y':              # r:y|e:y|z:y|a:y
                                signature_timestamp = float(decompressed[1].decode('utf-8'))
                                sender_userID = decompressed[2].decode('utf-8')
                                sender_keyID = int(decompressed[3].decode('utf-8'))
                                signature = decompressed[4]
                                msg_list = [decompressed[5].decode('utf-8'),
                                            decompressed[6].decode('utf-8'),
                                            decompressed[7].decode('utf-8'),
                                            decompressed[8].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(receiver_userID, sender_userID, sender_keyID)
                                if not pu:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])
                            else:                                                   # r:y|e:y|z:y|a:n
                                timestamp = float(decompressed[1].decode('utf-8').split(":")[1])
                                sender = decompressed[2].decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = decompressed[3].decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(decompressed[4].decode('utf-8').split(":")[1])
                        else:                                                   # r:y|e:y|z:n
                            if message_list[1].split(b":")[1] == b'y':          # r:y|e:y|z:n|a:y
                                signature_timestamp = float(message_list[2].decode('utf-8'))
                                sender_userID = message_list[3].decode('utf-8')
                                sender_keyID = int(message_list[4].decode('utf-8'))
                                signature = message_list[5]
                                msg_list = [message_list[6].decode('utf-8'),
                                            message_list[7].decode('utf-8'),
                                            message_list[8].decode('utf-8'),
                                            message_list[9].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(receiver_userID, sender_userID, sender_keyID)
                                if not pu:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])
                            else:                                               # r:y|e:y|z:n|a:n
                                timestamp = float(message_list[2].decode('utf-8').split(":")[1])
                                sender = message_list[3].decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = message_list[4].decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(message_list[5].decode('utf-8').split(":")[1])

                    else:                                                           # r:y|e:n
                        if decoded[1].split(b':')[1] == b'y':                       # r:y|e:n|z:y
                            compressed = decoded[2]
                            decompressed = zlib.decompress(compressed).split(b'##########')
                            if decompressed[0].split(b':')[1] == b'y':  # r:y|e:n|z:y|a:y
                                signature_timestamp = float(decompressed[1].decode('utf-8'))
                                sender_userID = decompressed[2].decode('utf-8')
                                sender_keyID = int(decompressed[3].decode('utf-8'))
                                signature = decompressed[4]
                                msg_list = [decompressed[5].decode('utf-8'),
                                            decompressed[6].decode('utf-8'),
                                            decompressed[7].decode('utf-8'),
                                            decompressed[8].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(logged_in_userID, sender_userID, sender_keyID)
                                if not pu:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])
                            else:                                               # r:y|e:n|z:y|a:n
                                timestamp = float(decompressed[1].decode('utf-8').split(":")[1])
                                sender = decompressed[2].decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = decompressed[3].decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(decompressed[4].decode('utf-8').split(":")[1])
                        else:                                                   # r:y|e:n|z:n
                            if decoded[2].split(b':')[1] == b'y':               # r:y|e:n|z:n|a:y
                                signature_timestamp = float(decoded[3].decode('utf-8'))
                                sender_userID = decoded[4].decode('utf-8')
                                sender_keyID = int(decoded[5].decode('utf-8'))
                                signature = decoded[6]  # TEST DA LI JE OVAKO
                                msg_list = [decoded[7].decode('utf-8'),
                                            decoded[8].decode('utf-8'),
                                            decoded[9].decode('utf-8'),
                                            decoded[10].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(logged_in_userID, sender_userID, sender_keyID)
                                if not pu:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])

                            else:                                                   # r:y|e:n|z:n|a:n
                                timestamp = float(decoded[3].decode('utf-8').split(":")[1])
                                sender = decoded[4].decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = decoded[5].decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(decoded[6].decode('utf-8').split(":")[1])
                else:                                                               # r:n
                    curr_line = file.readline().rstrip(b'\n')                       # read encryption
                    if curr_line.split(b':')[1] == b'y':                            # r:n|e:y
                        algorithm = file.readline().rstrip(b'\n').split(b':')[1].decode('utf-8')
                        receiver_userID = file.readline().rstrip(b'\n').decode('utf-8')
                        receiver_keyID = int(file.readline().rstrip(b'\n').decode('utf-8'))
                        if receiver_userID != logged_in_userID:
                            self.open_error("This message isn't for you.")
                            self.set_enabled_components(False)
                            return
                        private_key = private_keyring.get_key(receiver_userID, receiver_keyID)
                        if private_key.key_size == 1024:
                            encrypted_session_key_size = 128
                        else:
                            encrypted_session_key_size = 256
                        encrypted_session_key = file.read(encrypted_session_key_size + 1).rstrip(b'\n')
                        encrypted_message = file.read().rstrip(b'\n')
                        symmetric_encryption = SymmetricEncryption(algorithm, public_keyring, private_keyring)
                        message = symmetric_encryption.decrypt(encrypted_message, encrypted_session_key,
                                                               receiver_userID, receiver_keyID, self.textbox_passphrase.text())
                        message_list = message.split(b"##########")
                        if message_list[0].split(b":")[1] == b'y':                          # r:n|e:y|z:y
                            compressed = message_list[1]
                            decompressed = zlib.decompress(compressed).split(b'##########')
                            if decompressed[0].split(b':')[1] == b'y':                      # r:n|e:y|z:y|a:y
                                signature_timestamp = float(decompressed[1].decode('utf-8'))
                                sender_userID = decompressed[2].decode('utf-8')
                                sender_keyID = int(decompressed[3].decode('utf-8'))
                                signature = decompressed[4]  # TEST DA LI JE OVAKO
                                msg_list = [decompressed[5].decode('utf-8'),
                                            decompressed[6].decode('utf-8'),
                                            decompressed[7].decode('utf-8'),
                                            decompressed[8].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(receiver_userID, sender_userID, sender_keyID)
                                if not pu:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])
                            else:                                                       # r:n|e:y|z:y|a:n
                                timestamp = float(decompressed[1].decode('utf-8').split(":")[1])
                                sender = decompressed[2].decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = decompressed[3].decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(decompressed[4].decode('utf-8').split(":")[1])

                        else:                                                       # r:n|e:y|z:n
                            if message_list[1].split(b":")[1] == b'y':              # r:n|e:y|z:n|a:y
                                signature_timestamp = float(message_list[2].decode('utf-8'))
                                sender_userID = message_list[3].decode('utf-8')
                                sender_keyID = int(message_list[4].decode('utf-8'))
                                signature = message_list[5]  # TEST DA LI JE OVAKO
                                msg_list = [message_list[6].decode('utf-8'),
                                            message_list[7].decode('utf-8'),
                                            message_list[8].decode('utf-8'),
                                            message_list[9].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(receiver_userID, sender_userID, sender_keyID)
                                if not pu:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])
                            else:                                               # r:n|e:y|z:n|a:n
                                timestamp = float(message_list[2].decode('utf-8').split(":")[1])
                                sender = message_list[3].decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = message_list[4].decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(message_list[5].decode('utf-8').split(":")[1])
                    else:                                                           # r:n|e:n
                        curr_line = file.readline().rstrip(b'\n')  # read zip
                        if curr_line.split(b':')[1] == b'y':                        # r:n|e:n|z:y
                            compressed = file.read()

                            decompressed = zlib.decompress(compressed).split(b'##########')
                            if decompressed[0].split(b':')[1] == b'y':  # r:n|e:n|z:y|a:y
                                signature_timestamp = float(decompressed[1].decode('utf-8'))
                                sender_userID = decompressed[2].decode('utf-8')
                                sender_keyID = int(decompressed[3].decode('utf-8'))
                                signature = decompressed[4]
                                msg_list = [decompressed[5].decode('utf-8'),
                                            decompressed[6].decode('utf-8'),
                                            decompressed[7].decode('utf-8'),
                                            decompressed[8].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(logged_in_userID, sender_userID, sender_keyID)
                                if not pu:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])

                            else:                                                   # r:n|e:n|z:y|a:n
                                timestamp = float(decompressed[1].decode('utf-8').split(":")[1])
                                sender = decompressed[2].decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = decompressed[3].decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(decompressed[4].decode('utf-8').split(":")[1])
                        else:                                                   # r:n|e:n|z:n
                            curr_line = file.readline().rstrip(b'\n')           # read authentication
                            if curr_line.split(b':')[1] == b'y':                # # r:n|e:n|z:n|a:y
                                signature_timestamp = float(file.readline().rstrip(b'\n').decode('utf-8'))
                                sender_userID = file.readline().rstrip(b'\n').decode('utf-8')
                                sender_keyID = int(file.readline().rstrip(b'\n').decode('utf-8'))
                                public_key = public_keyring.get_key(logged_in_userID, sender_userID, sender_keyID)
                                # prosto ako otvara tudju poruku, ne mora da znaci da ima u svom prstenu javni kljuc posiljaoca
                                # sto znaci da poruka nije namenjena za njega jer posiljalac moze da sifruje samo privatnim
                                # kljucem koji primalac ima u svom javnom prstenu kljuceva
                                if not public_key:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                if public_key.public_key.key_size == 1024:
                                    signature_num_bytes = 128
                                else:
                                    signature_num_bytes = 256
                                signature = file.read(signature_num_bytes + 1).rstrip(b'\n')
                                msg_list = [file.readline().rstrip(b'\n').decode('utf-8'),
                                            file.readline().rstrip(b'\n').decode('utf-8'),
                                            file.readline().rstrip(b'\n').decode('utf-8'),
                                            file.read()[:-1:].decode('utf-8')]
                                msg_list.reverse()
                                msg = "|".join(msg_list)
                                msg += f"|{signature_timestamp}"
                                pu = public_keyring.get_key(logged_in_userID, sender_userID, sender_keyID)
                                if not asymmetric_encryption.verify(pu.public_key, signature, msg):
                                    self.open_error("Message verification wasn't successful")
                                    self.set_enabled_components(False)
                                    return
                                timestamp = float(msg_list[3].split(":")[1])
                                sender = msg_list[2]
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = msg_list[1]
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                else:
                                    self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                    self.textbox_name.setText(sender_userID.split(":")[0])
                                    self.textbox_email.setText(sender_userID.split(":")[1])
                                    self.text_message.setText(msg_list[0].split(":")[1])

                            else:                                               # r:n|e:n|z:n|a:n
                                timestamp = float(file.readline().rstrip(b'\n').decode('utf-8').split(":")[1])
                                sender = file.readline().rstrip(b'\n').decode('utf-8')
                                sender_user_name = sender.split(":")[1]
                                sender_user_email = sender.split(":")[2]
                                sender_userID = sender_user_name + ":" + sender_user_email
                                receiver = file.readline().rstrip(b'\n').decode('utf-8')
                                receiver_user_name = receiver.split(":")[1]
                                receiver_user_email = receiver.split(":")[2]
                                receiver_userID = receiver_user_name + ":" + receiver_user_email
                                if receiver_userID != logged_in_userID:
                                    self.open_error("This message isn't for you.")
                                    self.set_enabled_components(False)
                                    return
                                self.textbox_date.setText(str(datetime.fromtimestamp(timestamp)).split(".")[0])
                                self.textbox_name.setText(sender_userID.split(":")[0])
                                self.textbox_email.setText(sender_userID.split(":")[1])
                                self.text_message.setText(file.read().decode('utf-8').split(":")[1])

        except Exception as e:
            self.open_error("Faulty file. Ask the sender to send it again.")
            self.set_enabled_components(False)

    def save_message(self):
        options = QFileDialog.Options()
        filename, _ = QFileDialog.getSaveFileName(None, "Save message as",
                                                  os.path.join(os.path.expanduser("~"), "Desktop"),
                                                  "Text documents (*.txt)", options=options)

        with open(filename, "w") as file:
            file.write("Date: " + self.textbox_date.text() + "\n")
            file.write("From: " + self.textbox_name.text() + ":" + self.textbox_email.text() + "\n")
            file.write("Text: \n")
            file.write(self.text_message.toPlainText())

        self.open_information("Message saved successfully!")
        self.set_enabled_components(False)

    def setupUi(self, receive_message_window):
        receive_message_window.setObjectName("receive_message_window")
        receive_message_window.resize(1015, 779)
        self.centralwidget = QtWidgets.QWidget(receive_message_window)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(420, 10, 181, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.button_select_message = QtWidgets.QPushButton(self.centralwidget)
        self.button_select_message.setGeometry(QtCore.QRect(420, 60, 151, 28))
        self.button_select_message.setObjectName("button_select_message")
        self.label_passphrase = QtWidgets.QLabel(self.centralwidget)
        self.label_passphrase.setEnabled(False)
        self.label_passphrase.setGeometry(QtCore.QRect(10, 150, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_passphrase.setFont(font)
        self.label_passphrase.setObjectName("label_passphrase")
        self.textbox_passphrase = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_passphrase.setEnabled(False)
        self.textbox_passphrase.setGeometry(QtCore.QRect(150, 150, 601, 31))
        self.textbox_passphrase.setEchoMode(QtWidgets.QLineEdit.Password)
        self.textbox_passphrase.setObjectName("textbox_passphrase")
        self.button_open_message = QtWidgets.QPushButton(self.centralwidget)
        self.button_open_message.setEnabled(False)
        self.button_open_message.setGeometry(QtCore.QRect(782, 150, 151, 28))
        self.button_open_message.setObjectName("button_open_message")
        self.label_message = QtWidgets.QLabel(self.centralwidget)
        self.label_message.setEnabled(False)
        self.label_message.setGeometry(QtCore.QRect(10, 220, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_message.setFont(font)
        self.label_message.setObjectName("label_message")
        self.label_name = QtWidgets.QLabel(self.centralwidget)
        self.label_name.setEnabled(False)
        self.label_name.setGeometry(QtCore.QRect(10, 260, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_name.setFont(font)
        self.label_name.setObjectName("label_name")
        self.textbox_name = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_name.setEnabled(False)
        self.textbox_name.setGeometry(QtCore.QRect(70, 260, 411, 31))
        self.textbox_name.setObjectName("textbox_name")
        self.textbox_email = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_email.setEnabled(False)
        self.textbox_email.setGeometry(QtCore.QRect(560, 260, 411, 31))
        self.textbox_email.setObjectName("textbox_email")
        self.label_email = QtWidgets.QLabel(self.centralwidget)
        self.label_email.setEnabled(False)
        self.label_email.setGeometry(QtCore.QRect(500, 260, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_email.setFont(font)
        self.label_email.setObjectName("label_email")
        self.textbox_date = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_date.setEnabled(False)
        self.textbox_date.setGeometry(QtCore.QRect(70, 310, 151, 31))
        self.textbox_date.setObjectName("textbox_date")
        self.label_date = QtWidgets.QLabel(self.centralwidget)
        self.label_date.setEnabled(False)
        self.label_date.setGeometry(QtCore.QRect(10, 310, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_date.setFont(font)
        self.label_date.setObjectName("label_date")
        self.label_text = QtWidgets.QLabel(self.centralwidget)
        self.label_text.setEnabled(False)
        self.label_text.setGeometry(QtCore.QRect(10, 350, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_text.setFont(font)
        self.label_text.setObjectName("label_text")
        self.text_message = QtWidgets.QTextEdit(self.centralwidget)
        self.text_message.setEnabled(False)
        self.text_message.setGeometry(QtCore.QRect(10, 380, 991, 221))
        self.text_message.setObjectName("text_message")
        self.button_save_message = QtWidgets.QPushButton(self.centralwidget)
        self.button_save_message.setEnabled(False)
        self.button_save_message.setGeometry(QtCore.QRect(410, 630, 171, 28))
        self.button_save_message.setObjectName("button_save_message")
        receive_message_window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(receive_message_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1015, 26))
        self.menubar.setObjectName("menubar")
        receive_message_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(receive_message_window)
        self.statusbar.setObjectName("statusbar")
        receive_message_window.setStatusBar(self.statusbar)

        # added events
        self.button_select_message.clicked.connect(lambda: self.select_message())
        self.button_save_message.clicked.connect(lambda: self.save_message())
        self.button_open_message.clicked.connect(lambda: self.open_message())

        self.retranslateUi(receive_message_window)
        QtCore.QMetaObject.connectSlotsByName(receive_message_window)

    def retranslateUi(self, receive_message_window):
        _translate = QtCore.QCoreApplication.translate
        receive_message_window.setWindowTitle(_translate("receive_message_window", "Receive Message"))
        self.label.setText(_translate("receive_message_window", "Receive Message"))
        self.button_select_message.setText(_translate("receive_message_window", "Select the message"))
        self.label_passphrase.setText(_translate("receive_message_window", "Input passphrase:"))
        self.button_open_message.setText(_translate("receive_message_window", "Open the message"))
        self.label_message.setText(_translate("receive_message_window", "Message"))
        self.label_name.setText(_translate("receive_message_window", "Name:"))
        self.label_email.setText(_translate("receive_message_window", "Email:"))
        self.label_date.setText(_translate("receive_message_window", "Date:"))
        self.label_text.setText(_translate("receive_message_window", "Text:"))
        self.button_save_message.setText(_translate("receive_message_window", "Save the message"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    receive_message_window = QtWidgets.QMainWindow()
    ui = Ui_receive_message_window()
    ui.setupUi(receive_message_window)
    receive_message_window.show()
    sys.exit(app.exec_())

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\OpenPGP\ui\send_message_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import base64
import os
import time
import zlib

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QFileDialog, QMessageBox

from OpenPGP.asymmetric_encryption.asymmetricencryption import AsymmetricEncryption
from OpenPGP.asymmetric_encryption.keys.privatekey import PrivateKey
from OpenPGP.asymmetric_encryption.keys.privatekeyring import private_keyring
from OpenPGP.asymmetric_encryption.keys.publickey import PublicKey
from OpenPGP.asymmetric_encryption.keys.publickeyring import public_keyring
from OpenPGP.symmetric_encryption.symmetricencryption import SymmetricEncryption
from OpenPGP.users.users_db import usersDB


class Ui_send_message_window(object):

    def __init__(self):
        self.sender_private_key = None
        self.receiver_public_key = None

    def select_sender_private_key(self, key: PrivateKey):
        self.sender_private_key = key
        self.load_sender_key_table()

    def select_receiver_public_key(self, key: PublicKey):
        self.receiver_public_key = key
        self.load_receiver_key_table()

    def load_sender_key_table(self):
        row = 0
        logged_in_userID = usersDB.logged_in_user.name + ":" + usersDB.logged_in_user.email
        receiverID = self.textbox_name.text() + ":" + self.textbox_email.text()
        private_keys = list(
            filter(lambda key: public_keyring.get_key(receiverID, logged_in_userID, key.keyID) is not None,
                   private_keyring.get_keys_by_userID(logged_in_userID)))
        self.sender_key_table.setRowCount(len(private_keys))

        for key in private_keys:
            self.sender_key_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(key.timestamp)))
            self.sender_key_table.setItem(row, 1, QtWidgets.QTableWidgetItem(str(key.keyID)))
            self.sender_key_table.setItem(row, 2, QtWidgets.QTableWidgetItem(key.repr_public_key()))
            self.sender_key_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(key.encrypted_private_key)))
            self.sender_key_table.setItem(row, 4, QtWidgets.QTableWidgetItem(str(key.userID)))
            button = QtWidgets.QPushButton("Select")
            button.clicked.connect(lambda _, k=key: self.select_sender_private_key(k))
            self.sender_key_table.setCellWidget(row, 5, button)

            # bojenje tog reda koji je selektovan kako bi se naznacilo
            if self.sender_private_key == key:
                for column in range(5):
                    self.sender_key_table.item(row, column).setBackground(QColor(255, 255, 0))

            row += 1

        self.sender_key_table.resizeColumnsToContents()

    def load_receiver_key_table(self):
        row = 0
        receiverID = self.textbox_name.text() + ":" + self.textbox_email.text()
        logged_in_userID = usersDB.logged_in_user.name + ":" + usersDB.logged_in_user.email
        public_keys = list(
            filter(lambda key: receiverID == key.userID, public_keyring.get_keys_by_userID(logged_in_userID)))
        self.receiver_key_table.setRowCount(len(public_keys))

        for key in public_keys:
            self.receiver_key_table.setItem(row, 0, QtWidgets.QTableWidgetItem(str(key.timestamp)))
            self.receiver_key_table.setItem(row, 1, QtWidgets.QTableWidgetItem(str(key.keyID)))
            self.receiver_key_table.setItem(row, 2, QtWidgets.QTableWidgetItem(key.repr_public_key()))
            self.receiver_key_table.setItem(row, 3, QtWidgets.QTableWidgetItem(str(key.userID)))
            button = QtWidgets.QPushButton("Select")
            button.clicked.connect(lambda _, k=key: self.select_receiver_public_key(k))
            self.receiver_key_table.setCellWidget(row, 4, button)

            # bojenje tog reda koji je selektovan kako bi se naznacilo
            if self.receiver_public_key == key:
                for column in range(4):
                    self.receiver_key_table.item(row, column).setBackground(QColor(255, 255, 0))

            row += 1

        self.receiver_key_table.resizeColumnsToContents()

    def open_error(self, error_message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(error_message)
        msg.setWindowTitle("Error!")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()

    def send_message(self):

        def write_data_to_bytes(write_data):
            data = b''
            write_data.reverse()
            for i, item in enumerate(write_data):
                it = item
                if isinstance(item, str):
                    it = item.encode('utf-8')
                data += it
                if i < len(write_data) - 1:
                    data += b"##########"
            return data

        receiver_userID = self.textbox_name.text() + ":" + self.textbox_email.text()
        logged_in_userID = usersDB.logged_in_user.name + ":" + usersDB.logged_in_user.email
        write_data = [f"text:{self.message.toPlainText()}", f"to:{receiver_userID}", f"from:{logged_in_userID}",
                      f"timestamp:{time.time()}"]
        asymmetric_encryption = AsymmetricEncryption()

        if self.checkbox_authentication.isChecked():
            if self.sender_private_key is None:
                self.open_error("Select your private key to make a signature")
                return
            signature_timestamp = time.time()
            msg = "|".join(write_data)
            msg += f"|{signature_timestamp}"
            if self.textbox_passphrase.text() != usersDB.logged_in_user.password:
                self.open_error("Wrong passphrase!")
                return
            signature = asymmetric_encryption.sign(self.sender_private_key, msg, self.textbox_passphrase.text())
            write_data.append(signature)
            write_data.append(str(self.sender_private_key.keyID))
            write_data.append(logged_in_userID)
            write_data.append(str(signature_timestamp))
            write_data.append("authentication:y")
        else:
            write_data.append("authentication:n")

        if self.checkbox_compression.isChecked():
            write_data = [zlib.compress(write_data_to_bytes(write_data)), "zip:y"]
        else:
            write_data.append("zip:n")

        if self.checkbox_encryption.isChecked():
            if self.receiver_public_key is None:
                self.open_error("Nije selektovan javni kljuc primaoca")
                return
            symmetric_encryption = SymmetricEncryption("3DES" if self.radio_tripleDES.isChecked() else "AES",
                                                       public_keyring,
                                                       private_keyring)

            encrypted_message, encrypted_session_key = symmetric_encryption.encrypt(write_data_to_bytes(write_data),
                                                                                    receiver_userID,
                                                                                    self.receiver_public_key.keyID)

            write_data = [encrypted_message,
                          encrypted_session_key,
                          str(self.receiver_public_key.keyID),
                          receiver_userID,
                          f"algorithm:{'3DES' if self.radio_tripleDES.isChecked() else 'AES'}",
                          "encryption:y"]
        else:
            write_data.append("encryption:n")

        if self.checkbox_radix64.isChecked():
            write_data = [base64.b64encode(write_data_to_bytes(write_data)), "radix64:y"]
        else:
            write_data.append("radix64:n")

        options = QFileDialog.Options()
        filename, _ = QFileDialog.getSaveFileName(None, "Save as", os.path.join(os.path.expanduser("~"), "Desktop"),
                                                  "All files (*)", options=options)

        if filename:
            with open(filename, "wb") as file:
                for data in reversed(write_data):
                    if isinstance(data, str):
                        data = data.encode('utf-8')
                    file.write(data + b'\n')



    def setupUi(self, send_message_window):
        send_message_window.setObjectName("send_message_window")
        send_message_window.resize(1091, 874)
        self.centralwidget = QtWidgets.QWidget(send_message_window)
        self.centralwidget.setObjectName("centralwidget")
        self.receiver_key_table = QtWidgets.QTableWidget(self.centralwidget)
        self.receiver_key_table.setEnabled(False)
        self.receiver_key_table.setGeometry(QtCore.QRect(0, 380, 1101, 161))
        self.receiver_key_table.setObjectName("receiver_key_table")
        self.receiver_key_table.setColumnCount(5)
        self.receiver_key_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.receiver_key_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.receiver_key_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.receiver_key_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.receiver_key_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.receiver_key_table.setHorizontalHeaderItem(4, item)
        self.textbox_name = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_name.setGeometry(QtCore.QRect(60, 40, 441, 31))
        self.textbox_name.setObjectName("textbox_name")
        self.checkbox_compression = QtWidgets.QCheckBox(self.centralwidget)
        self.checkbox_compression.setGeometry(QtCore.QRect(10, 550, 121, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkbox_compression.setFont(font)
        self.checkbox_compression.setObjectName("checkbox_compression")
        self.radio_tripleDES = QtWidgets.QRadioButton(self.centralwidget)
        self.radio_tripleDES.setEnabled(False)
        self.radio_tripleDES.setGeometry(QtCore.QRect(180, 350, 95, 20))
        self.radio_tripleDES.setChecked(True)
        self.radio_tripleDES.setObjectName("radio_tripleDES")
        self.button_send = QtWidgets.QPushButton(self.centralwidget)
        self.button_send.setGeometry(QtCore.QRect(440, 780, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.button_send.setFont(font)
        self.button_send.setObjectName("button_send")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(450, 0, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 570, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.message = QtWidgets.QTextEdit(self.centralwidget)
        self.message.setGeometry(QtCore.QRect(10, 600, 1071, 171))
        self.message.setObjectName("message")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 50, 51, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.checkbox_authentication = QtWidgets.QCheckBox(self.centralwidget)
        self.checkbox_authentication.setGeometry(QtCore.QRect(10, 80, 141, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkbox_authentication.setFont(font)
        self.checkbox_authentication.setObjectName("checkbox_authentication")
        self.checkbox_radix64 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkbox_radix64.setGeometry(QtCore.QRect(160, 550, 181, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkbox_radix64.setFont(font)
        self.checkbox_radix64.setObjectName("checkbox_radix64")
        self.radio_AES = QtWidgets.QRadioButton(self.centralwidget)
        self.radio_AES.setEnabled(False)
        self.radio_AES.setGeometry(QtCore.QRect(280, 350, 95, 20))
        self.radio_AES.setObjectName("radio_AES")
        self.checkbox_encryption = QtWidgets.QCheckBox(self.centralwidget)
        self.checkbox_encryption.setGeometry(QtCore.QRect(10, 350, 121, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.checkbox_encryption.setFont(font)
        self.checkbox_encryption.setObjectName("checkbox_encryption")
        self.sender_key_table = QtWidgets.QTableWidget(self.centralwidget)
        self.sender_key_table.setEnabled(False)
        self.sender_key_table.setGeometry(QtCore.QRect(0, 110, 1101, 171))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.sender_key_table.setFont(font)
        self.sender_key_table.setObjectName("sender_key_table")
        self.sender_key_table.setColumnCount(6)
        self.sender_key_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.sender_key_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.sender_key_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.sender_key_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.sender_key_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.sender_key_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.sender_key_table.setHorizontalHeaderItem(5, item)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(540, 50, 51, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.textbox_email = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_email.setGeometry(QtCore.QRect(590, 40, 441, 31))
        self.textbox_email.setObjectName("textbox_email")
        self.label_passphrase = QtWidgets.QLabel(self.centralwidget)
        self.label_passphrase.setEnabled(False)
        self.label_passphrase.setGeometry(QtCore.QRect(10, 300, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_passphrase.setFont(font)
        self.label_passphrase.setObjectName("label_passphrase")
        self.textbox_passphrase = QtWidgets.QLineEdit(self.centralwidget)
        self.textbox_passphrase.setEnabled(False)
        self.textbox_passphrase.setGeometry(QtCore.QRect(110, 290, 961, 31))
        self.textbox_passphrase.setObjectName("textbox_passphrase")
        self.textbox_passphrase.setEchoMode(QtWidgets.QLineEdit.Password)
        send_message_window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(send_message_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1091, 26))
        self.menubar.setObjectName("menubar")
        send_message_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(send_message_window)
        self.statusbar.setObjectName("statusbar")
        send_message_window.setStatusBar(self.statusbar)

        # added events
        def toggle_authentication(state: bool):
            self.sender_key_table.setEnabled(state)
            self.label_passphrase.setEnabled(state)
            self.textbox_passphrase.setEnabled(state)

        def toggle_encryption(state: bool):
            self.receiver_key_table.setEnabled(state)
            self.radio_AES.setEnabled(state)
            self.radio_tripleDES.setEnabled(state)

        self.checkbox_authentication.stateChanged.connect(
            lambda: toggle_authentication(self.checkbox_authentication.isChecked()))
        self.checkbox_encryption.stateChanged.connect(lambda: toggle_encryption(self.checkbox_encryption.isChecked()))
        self.button_send.clicked.connect(lambda : self.send_message())

        self.load_sender_key_table()
        self.load_receiver_key_table()
        self.textbox_name.textChanged.connect(lambda: self.load_receiver_key_table())
        self.textbox_email.textChanged.connect(lambda: self.load_receiver_key_table())
        self.textbox_name.textChanged.connect(lambda: self.load_sender_key_table())
        self.textbox_email.textChanged.connect(lambda: self.load_sender_key_table())

        self.retranslateUi(send_message_window)
        QtCore.QMetaObject.connectSlotsByName(send_message_window)

    def retranslateUi(self, send_message_window):
        _translate = QtCore.QCoreApplication.translate
        send_message_window.setWindowTitle(_translate("send_message_window", "Send Message"))
        item = self.receiver_key_table.horizontalHeaderItem(0)
        item.setText(_translate("send_message_window", "Timestamp"))
        item = self.receiver_key_table.horizontalHeaderItem(1)
        item.setText(_translate("send_message_window", "Key ID"))
        item = self.receiver_key_table.horizontalHeaderItem(2)
        item.setText(_translate("send_message_window", "Public key"))
        item = self.receiver_key_table.horizontalHeaderItem(3)
        item.setText(_translate("send_message_window", "User ID"))
        item = self.receiver_key_table.horizontalHeaderItem(4)
        item.setText(_translate("send_message_window", "Select"))
        self.checkbox_compression.setText(_translate("send_message_window", "Compression"))
        self.radio_tripleDES.setText(_translate("send_message_window", "TripleDES"))
        self.button_send.setText(_translate("send_message_window", "Send"))
        self.label.setText(_translate("send_message_window", "Send Message"))
        self.label_3.setText(_translate("send_message_window", "Message:"))
        self.label_2.setText(_translate("send_message_window", "Name:"))
        self.checkbox_authentication.setText(_translate("send_message_window", "Authentication"))
        self.checkbox_radix64.setText(_translate("send_message_window", "Radix-64 conversion"))
        self.radio_AES.setText(_translate("send_message_window", "AES"))
        self.checkbox_encryption.setText(_translate("send_message_window", "Encryption"))
        item = self.sender_key_table.horizontalHeaderItem(0)
        item.setText(_translate("send_message_window", "Timestamp"))
        item = self.sender_key_table.horizontalHeaderItem(1)
        item.setText(_translate("send_message_window", "Key ID"))
        item = self.sender_key_table.horizontalHeaderItem(2)
        item.setText(_translate("send_message_window", "Public key"))
        item = self.sender_key_table.horizontalHeaderItem(3)
        item.setText(_translate("send_message_window", "Encrypted private key"))
        item = self.sender_key_table.horizontalHeaderItem(4)
        item.setText(_translate("send_message_window", "User ID"))
        item = self.sender_key_table.horizontalHeaderItem(5)
        item.setText(_translate("send_message_window", "Select"))
        self.label_4.setText(_translate("send_message_window", "Email:"))
        self.label_passphrase.setText(_translate("send_message_window", "Passphrase:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    send_message_window = QtWidgets.QMainWindow()
    ui = Ui_send_message_window()
    ui.setupUi(send_message_window)
    send_message_window.show()
    sys.exit(app.exec_())

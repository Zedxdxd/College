version: "3"
services:
  databaseUsers:
    image: mysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=TRUE
    ports:
      - 3306:3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    # volumes:
      # - ./init/initUsers.sql:/docker-entrypoint-initdb.d/initUsers.sql
      # - ./data:/var/lib/mysql     bolje definisi dole volume: dbusersdata i onda ovde kazi dbusersdata:/var/lib/mysql
    networks:
      - networkUsers
  
  databaseStore:
    image: mysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=TRUE
    ports:
      - 3307:3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    # volumes:
      # - ./init/initStore.sql:/docker-entrypoint-initdb.d/initStore.sql
      # - ./data:/var/lib/mysql
    networks:
      - networkStore
  
  adminer:
    image: adminer
    ports:
      - 8080:8080

  migrateusers:
    image: migrateusers
    build:
      context: .
      dockerfile: ./subsystemAuthentication/imageMigrateUsers.dockerfile
    depends_on:
      databaseUsers:
        condition: service_healthy
    environment:
      - PRODUCTION="PRODUCTION"
      - DATABASE_URL=mysql://root@databaseUsers/users
    networks:
      - networkUsers
  
  authentication:
    image: authentication
    build: 
      context: .
      dockerfile: ./subsystemAuthentication/imageAuthentication.dockerfile
    depends_on:
      - migrateusers
    ports:
      - 5000:5000
    environment:
      - PRODUCTION="PRODUCTION"
      - DATABASE_URL=mysql://root@databaseUsers/users
    networks:
      - networkUsers
  
  migratestore:
    image: migratestore
    build:
      context: .
      dockerfile: ./subsystemStore/imageMigrateStore.dockerfile
    depends_on:
      databaseStore:
        condition: service_healthy
    environment:
      - PRODUCTION="PRODUCTION"
      - DATABASE_URL=mysql://root@databaseStore/store
    networks:
      - networkStore
  
  owner:
    image: owner
    build: 
      context: .
      dockerfile: ./subsystemStore/imageOwner.dockerfile
    depends_on:
      - migratestore
    ports:
      - 5001:5000
    environment:
      - PRODUCTION="PRODUCTION"
      - DATABASE_URL=mysql://root@databaseStore/store
    networks:
      - networkStore
  
  customer:
    image: customer
    build: 
      context: .
      dockerfile: ./subsystemStore/imageCustomer.dockerfile
    depends_on:
      - migratestore
    ports:
      - 5002:5000
    environment:
      - PRODUCTION="PRODUCTION"
      - DATABASE_URL=mysql://root@databaseStore/store
      - BLOCKCHAIN_IP=blockchain
    networks:
      - networkStore
      - networkBlockchain
  
  courier:
    image: courier
    build: 
      context: .
      dockerfile: ./subsystemStore/imageCourier.dockerfile
    depends_on:
      - migratestore
    ports:
      - 5003:5000
    environment:
      - PRODUCTION="PRODUCTION"
      - DATABASE_URL=mysql://root@databaseStore/store
      - BLOCKCHAIN_IP=blockchain
    networks:
      - networkStore
      - networkBlockchain

  statistics:
    image: statistics
    build:
      context: ./subsystemStore/
      dockerfile: ./imageStatistics.dockerfile
    depends_on:
      - owner
    ports:
      - 5004:5000
    environment:
      - PRODUCTION=True
      - SOCKET_IP=0.0.0.0
      - SOCKET_PORT=9090
      - SPARKAPP_IP=statistics
      - DATABASE_IP=databaseStore
    networks:
      - networkStore

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - 8081:8080
      - 7077:7077
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      - networkStore

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - 8082:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    networks:
      - networkStore
  
  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - 8083:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    networks:
      - networkStore

  blockchain:
    image: trufflesuite/ganache-cli
    ports:
      - 8545:8545
    networks:
      - networkBlockchain


networks:
  networkStore:
  networkUsers:
  networkBlockchain: